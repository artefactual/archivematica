{
  "$id": "http://www.parcore.org/schema/types.json/#",
  "$schema": "http://json-schema.org/draft-06/schema#",
  "definitions": {
    "formatFamily": {
      "additionalProperties": false,
      "description": "A format family is simply a means of grouping more specific file formats into more general groups. These can be high level groupings such as Videos, Documents, etc, or more specific groupings such as JPEGs, Excel Spreadsheets, etc. It may even be used to group otherwise unrelated formats, to capture, for example, the set of accepted formats, for example, [PDF 1.4, TIFF, MKV, WAV], or to specify all formats, e.g. [ALL]. These can be formally specified, with a fixed ID and Namespace, or just a generic label",
      "properties": {
        "familyType": {
          "type": "string"
        },
        "formats": {
          "items": {
            "$ref": "#/definitions/parIdentifier"
          },
          "type": "array"
        },
        "identifier": {
          "$ref": "#/definitions/parIdentifier"
        }
      },
      "required": [],
      "type": "object"
    },
    "parFile": {
      "additionalProperties": false,
      "description": "A file that is an input or output of a preservation action",
      "properties": {
        "filepath": {
          "type": "string"
        }
      },
      "required": [],
      "type": "object"
    },
    "parIdentifier": {
      "additionalProperties": false,
      "description": "A generic identifier type for any PAR Core Entity. An identifier in PAR consists of the name of the object to identify, and the namespace in which that name is unique. These basic components should be combined into a GUID (Globally Unique Identifier). This is intended to be the machine readable and usable form and is the resource identifier that can be specified unambiguously in an API call. It is strongly recommended that this is a Version 3 or Version 5 UUID, generated by specifying the name of the object and a UUID identifying the namespace. The name and namespace elements are intended to be more human readable and usable forms of the identifier. Names are not required to be universally unique, but the combination of name and namespace should be.",
      "properties": {
        "guid": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        }
      },
      "required": [
        "guid"
      ],
      "type": "object"
    }
  }
}

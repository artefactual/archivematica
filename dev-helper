#!/bin/bash

# This file is part of Archivematica.
#
# Copyright 2010-2013 Artefactual Systems Inc. <http://artefactual.com>
#
# Archivematica is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Archivematica is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Archivematica.  If not, see <http://www.gnu.org/licenses/>.

# @package Archivematica
# @author Joseph Perry <joseph@artefactual.com>
# @version svn: $Id$

cd `dirname $0`
fn_exists()
{
  type $1 2>/dev/null | grep -q 'is a function'
}

colour () { "$@" 2>&1>&3|sed 's,.*,\x1B[31m&\x1B[0m,'>&2;} 3>&1

function git-pull() {
  part="git pull"
  echo -n "\"Would you like to ${part}?\" (y/N) "
  read a
  if [[ $a == "Y" || $a == "y" ]]; then
      echo "Doing ${part} ..."
      echo "Cleaning up..."
      cd localDevSetup/
      colour ./cleanup.sh
      cd ..
      currentBranch=`git status | grep '# On branch ' | awk '{print $4}'`
      gitDiff=`git diff`
      if [ -z "$gitDiff" -a "${gitDiff+xxx}" = "xxx" ]; then
        echo "No changes to store."
      else
        echo "Storing changes (to be restored with 'git stash pop'), viewed with git-diff."
        git stash
      fi
      colour git pull --rebase origin ${currentBranch}
      colour git submodule init
      colour git submodule update
      if [ -z "$gitDiff" -a "${gitDiff+xxx}" = "xxx" ]; then
        echo "No changes to restore"
      else
        echo "Restoring changes"
        git stash pop
      fi
      echo "Integrating into environment..."
      cd localDevSetup/
      colour ./createLocalDevDirectories.sh
      cd ..

      echo "Updating FPR admin..."
      # this will do nothing if you are in a branch with no submodules
      git submodule init
      git submodule update
      
      if [ -d src/dashboard/src/fpr ]; then
          echo "entering fpr admin module"
          cd src/dashboard/src/fpr
          git checkout 1.x
          git pull
          cd ../../../../
      fi

  else
          echo "not going to ${part}"
  fi
}

function package-update() {
  part="update/install package requirements"
  echo -n "\"Would you like to ${part}?\" (y/N) "
  read a
  if [[ $a == "Y" || $a == "y" ]]; then
          echo "Going to ${part} ..."
          cd localDevSetup/
          colour sudo apt-get update
          colour sudo ./installDependsFromDebianFile.py ./../src/archivematicaCommon/debian/control
          #colour sudo ./installDependsFromDebianFile.py ./../src/createDublinCore/debian/control
          colour sudo ./installDependsFromDebianFile.py ./../src/dashboard/debian/control
          #./installDependsFromDebianFile.py ./../src/easy-extract/debian/control
          colour sudo ./installDependsFromDebianFile.py ./../src/MCPClient/debian/control
          colour sudo ./installDependsFromDebianFile.py ./../src/MCPrpcCLI/debian/control
          colour sudo ./installDependsFromDebianFile.py ./../src/MCPServer/debian/control
          colour #./installDependsFromDebianFile.py ./../src/metaPackage-forensic-tools/debian/control
          colour #./installDependsFromDebianFile.py ./../src/metaPackage-shotgun/debian/control
          colour sudo ./installDependsFromDebianFile.py ./../src/sanitizeNames/debian/control
          colour sudo ./installDependsFromDebianFile.py ./../src/SIPCreationTools/debian/control
          colour sudo ./installDependsFromDebianFile.py ./../src/transcoder/debian/control
          colour sudo ./installDependsFromDebianFile.py ./../src/upload-qubit/debian/control
          colour #./installDependsFromDebianFile.py ./../src/vm-includes/debian/control
          colour sudo pip install -r ../src/dashboard/src/requirements/production.txt     
          cd ..
  else
          echo "Not going to ${part}."
  fi
}

function recreate-db() {
  part="recreate the databases"
  echo -n "\"Would you like to ${part}?\" (y/N) "
  read a
  if [[ $a == "Y" || $a == "y" ]]; then
          echo "Going to ${part} ..."
          cd localDevSetup/
          sudo stop archivematica-mcp-server
          sudo stop archivematica-mcp-client
          sudo apache2ctl stop
          colour ./recreateDB.sh
          cd ..
          sudo start archivematica-mcp-server
          sudo start archivematica-mcp-client
          sudo apachectl start
  else
          echo "Not going to ${part}."
  fi
}

function erase-indexes() {
  part="erase the ElasticSearch indexes"
  echo -n "\"Would you like to ${part}?\" (y/N) "
  read a
  if [[ $a == "Y" || $a == "y" ]]; then
          localDevSetup/eraseElasticSearchIndexes.py -f
  else
          echo "Not going to ${part}."
  fi
}

function clear-storage() {
  part="clear transfer backlog and AIP storage?"
  echo -n "\"Would you like to ${part}?\" (y/N) "
  read a
  if [[ $a == "Y" || $a == "y" ]]; then
    set -x
    sudo rm -rf /var/archivematica/sharedDirectory/www/AIPsStore/transferBacklog/originals/*
    sudo rm -rf /var/archivematica/sharedDirectory/www/AIPsStore/????
    set +x
  else
    echo "Not going to ${part}"
  fi
}

function restart() {
  part="restart archivematica services"
  echo -n "\"Would you like to ${part}?\" (y/N) "
  read a
  if [[ $a == "Y" || $a == "y" ]]; then
          echo "Going to ${part} ..."
          sudo stop archivematica-mcp-server
          sudo stop archivematica-mcp-client
          sudo /etc/init.d/gearman-job-server stop
          sudo /etc/init.d/elasticsearch stop
          sleep 1

          if [ -e "/tmp/archivematicaMCPServerPID" ]
          then
            sudo kill -9 `cat /tmp/archivematicaMCPServerPID`
          fi

          sleep 3
          sudo /etc/init.d/elasticsearch start
          sudo /etc/init.d/gearman-job-server start
          sudo rm /tmp/archivematicaMCP*
          colour sudo start archivematica-mcp-server
          colour sudo start archivematica-mcp-client
          colour sudo apache2ctl restart
  else
          echo "Not going to ${part}."
  fi
}

function update-sampledata() {
  part="update sample data in $HOME/archivematica-sampledata"
  echo -n "\"Would you like to ${part}?\" (y/N) "
  read a
  if [[ $a == "Y" || $a == "y" ]]; then
    if [ ! -d ~/archivematica-sampledata ]; then
        cd 
        colour git clone https://github.com/artefactual/archivematica-sampledata.git
    else
        cd ~/archivematica-sampledata
        colour git pull
    fi
    cd `dirname $0`
  else
          echo "Not going to ${part}."
  fi
}

function export-sampledata() {
  part="export sample data from $HOME/archivematica-sampledata"
  echo -n "\"Would you like to ${part}?\" (y/N) "
  read a
  if [[ $a == "Y" || $a == "y" ]]; then
    cd ~/archivematica-sampledata
    DATE=`date +%Y-%m-%d-%H-%M-%S`
    exportDir="$HOME/archivematica-sampledata-$DATE"
    echo exporting to "${exportDir}"
    mkdir "${exportDir}"
    git archive master | tar -x -C "${exportDir}"
    git submodule foreach "cd ~/archivematica-sampledata && 
        cd \"\$path\" &&
        git archive master | tar -x -C \"${exportDir}/\$path\"" 
    cd `dirname $0`
  else
          echo "Not going to ${part}."
  fi
}

function update-atom() {
  part="update AtoM and restart its atom-worker service"
  echo -n "\"Would you like to ${part}?\" (y/N) "
  read a
  if [[ $a == "Y" || $a == "y" ]]; then
          cd atom-git
          sudo -u www-data git fetch origin
          sudo -u www-data git reset --hard origin/stable/1.3.x
          sudo -u www-data sed -i "s/'qbAclPlugin',/      'qbAclPlugin',\n'qtSwordPlugin',/g" config/ProjectConfiguration.class.php
          sudo -u www-data rm -rf cache/*
          sudo -u www-data php symfony cc
          cd -
          colour sudo stop atom-worker
          colour sudo start atom-worker
  else
          echo "Not going to ${part}."
  fi
}

function example() {
  part="example"
  echo -n "\"Would you like to ${part}?\" (y/N) "
  read a
  if [[ $a == "Y" || $a == "y" ]]; then
          echo "Going to ${part} ..."
  else
          echo "Not going to ${part}"
  fi
}

# Run only one function if given
if [ ! -z ${1} ]; then
  ${1}
  exit
fi

git-pull
package-update
recreate-db
erase-indexes
clear-storage
restart
update-sampledata
export-sampledata
update-atom
